// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Raphael.Shared.DbContexts;

#nullable disable

namespace Raphael.Shared.Migrations
{
    [DbContext(typeof(RaphaelContext))]
    [Migration("20250926154631_AddProviderCoordinates")]
    partial class AddProviderCoordinates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Raphael.Shared.Entities.BillingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("APAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("APCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("APSubAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ARAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ARCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ARSubAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCopay")
                        .HasColumnType("bit");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex("UnitId1");

                    b.ToTable("BillingItems");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.CapacityDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacityDetailTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SpaceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapacityDetailTypeId");

                    b.HasIndex("SpaceTypeId");

                    b.ToTable("CapacityDetails");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.CapacityDetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CapacityDetailTypes");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.CapacityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Capacities");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FundingSourceId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SpaceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FundingSourceId");

                    b.HasIndex("RiderId")
                        .IsUnique()
                        .HasFilter("[RiderId] IS NOT NULL");

                    b.HasIndex("SpaceTypeId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.FundingSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BarcodeScanRequired")
                        .HasColumnType("bit");

                    b.Property<string>("ContactFirst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactLast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DriverSignatureDropoff")
                        .HasColumnType("bit");

                    b.Property<bool?>("DriverSignaturePickup")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FAX")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RequireOdometer")
                        .HasColumnType("bit");

                    b.Property<bool?>("SignatureDropoff")
                        .HasColumnType("bit");

                    b.Property<bool?>("SignaturePickup")
                        .HasColumnType("bit");

                    b.Property<string>("VectorcareFacilityId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FundingSources");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.FundingSourceBillingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingItemId")
                        .HasColumnType("int");

                    b.Property<int?>("FreeQty")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FundingSourceId")
                        .HasColumnType("int");

                    b.Property<int?>("GreaterThanMinQty")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("LessOrEqualMaxQty")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Per")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcedureCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SpaceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BillingItemId");

                    b.HasIndex("FundingSourceId");

                    b.HasIndex("SpaceTypeId");

                    b.ToTable("FundingSourceBillingItems");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.GPS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdVehicleRoute")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<double>("Speed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdVehicleRoute");

                    b.ToTable("GPSData");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.RouteAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("VehicleRouteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleRouteId");

                    b.ToTable("RouteAvailabilities");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.RouteFundingSource", b =>
                {
                    b.Property<int>("VehicleRouteId")
                        .HasColumnType("int");

                    b.Property<int>("FundingSourceId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("VehicleRouteId", "FundingSourceId");

                    b.HasIndex("FundingSourceId");

                    b.ToTable("RouteFundingSources");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.RouteSuspension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("SuspensionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SuspensionStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleRouteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleRouteId");

                    b.ToTable("RouteSuspensions");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("ActualArriveTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("ActualPerformTime")
                        .HasColumnType("time");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("ArriveDistance")
                        .HasColumnType("float");

                    b.Property<string>("AuthNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DistanceToPoint")
                        .HasColumnType("float");

                    b.Property<TimeSpan?>("ETATime")
                        .HasColumnType("time");

                    b.Property<int?>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("FundingSourceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GpsArrive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("Odometer")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("PassengerSignature")
                        .HasColumnType("varbinary(max)");

                    b.Property<double?>("PerformDistance")
                        .HasColumnType("float");

                    b.Property<bool>("Performed")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("ScheduleLatitude")
                        .HasColumnType("float");

                    b.Property<double>("ScheduleLongitude")
                        .HasColumnType("float");

                    b.Property<TimeSpan?>("ScheduledApptTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("ScheduledPickupTime")
                        .HasColumnType("time");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("SpaceTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan?>("TravelTime")
                        .HasColumnType("time");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleRouteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("VehicleRouteId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.SpaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float>("LoadTime")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("UnloadTime")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CapacityTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SpaceTypes");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Authorization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Charge")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Distance")
                        .HasColumnType("float");

                    b.Property<string>("DriverNoShowReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dropoff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DropoffAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DropoffComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DropoffLatitude")
                        .HasColumnType("float");

                    b.Property<double>("DropoffLongitude")
                        .HasColumnType("float");

                    b.Property<string>("DropoffPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ETA")
                        .HasColumnType("float");

                    b.Property<TimeSpan?>("FromTime")
                        .HasColumnType("time");

                    b.Property<int?>("FundingSourceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<double?>("Paid")
                        .HasColumnType("float");

                    b.Property<string>("Pickup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickupAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickupComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PickupLatitude")
                        .HasColumnType("float");

                    b.Property<double>("PickupLongitude")
                        .HasColumnType("float");

                    b.Property<string>("PickupPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpaceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("ToTime")
                        .HasColumnType("time");

                    b.Property<string>("TripId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleRouteId")
                        .HasColumnType("int");

                    b.Property<bool>("WillCall")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FundingSourceId");

                    b.HasIndex("SpaceTypeId");

                    b.HasIndex("VehicleRouteId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.TripLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("TripLogs");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacityDetailTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapacityDetailTypeId");

                    b.HasIndex("CapacityTypeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.VehicleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleGroups");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.VehicleRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<string>("Garage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("GarageLatitude")
                        .HasColumnType("float");

                    b.Property<double>("GarageLongitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SmartphoneLogin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleRoutes");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.BillingItem", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raphael.Shared.Entities.Unit", null)
                        .WithMany("BillingItems")
                        .HasForeignKey("UnitId1");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.CapacityDetail", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.CapacityDetailType", "CapacityDetailType")
                        .WithMany()
                        .HasForeignKey("CapacityDetailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raphael.Shared.Entities.SpaceType", "SpaceType")
                        .WithMany("CapacityDetails")
                        .HasForeignKey("SpaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CapacityDetailType");

                    b.Navigation("SpaceType");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Customer", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.FundingSource", "FundingSource")
                        .WithMany()
                        .HasForeignKey("FundingSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raphael.Shared.Entities.SpaceType", "SpaceType")
                        .WithMany()
                        .HasForeignKey("SpaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FundingSource");

                    b.Navigation("SpaceType");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.FundingSourceBillingItem", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.BillingItem", "BillingItem")
                        .WithMany("FundingSourceBillingItems")
                        .HasForeignKey("BillingItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raphael.Shared.Entities.FundingSource", "FundingSource")
                        .WithMany("BillingItems")
                        .HasForeignKey("FundingSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raphael.Shared.Entities.SpaceType", "SpaceType")
                        .WithMany("FundingSourceBillingItems")
                        .HasForeignKey("SpaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingItem");

                    b.Navigation("FundingSource");

                    b.Navigation("SpaceType");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.GPS", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.VehicleRoute", "VehicleRoute")
                        .WithMany()
                        .HasForeignKey("IdVehicleRoute")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleRoute");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.RouteAvailability", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.VehicleRoute", "VehicleRoute")
                        .WithMany("Availabilities")
                        .HasForeignKey("VehicleRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleRoute");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.RouteFundingSource", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.FundingSource", "FundingSource")
                        .WithMany()
                        .HasForeignKey("FundingSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raphael.Shared.Entities.VehicleRoute", "VehicleRoute")
                        .WithMany("FundingSources")
                        .HasForeignKey("VehicleRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FundingSource");

                    b.Navigation("VehicleRoute");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.RouteSuspension", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.VehicleRoute", "VehicleRoute")
                        .WithMany("Suspensions")
                        .HasForeignKey("VehicleRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleRoute");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Schedule", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId");

                    b.HasOne("Raphael.Shared.Entities.VehicleRoute", "VehicleRoute")
                        .WithMany("Schedules")
                        .HasForeignKey("VehicleRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("VehicleRoute");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.SpaceType", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.CapacityType", "CapacityType")
                        .WithMany()
                        .HasForeignKey("CapacityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CapacityType");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Trip", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.Customer", "Customer")
                        .WithMany("Trips")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raphael.Shared.Entities.FundingSource", "FundingSource")
                        .WithMany()
                        .HasForeignKey("FundingSourceId");

                    b.HasOne("Raphael.Shared.Entities.SpaceType", "SpaceType")
                        .WithMany("Trips")
                        .HasForeignKey("SpaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raphael.Shared.Entities.VehicleRoute", "Run")
                        .WithMany()
                        .HasForeignKey("VehicleRouteId");

                    b.Navigation("Customer");

                    b.Navigation("FundingSource");

                    b.Navigation("Run");

                    b.Navigation("SpaceType");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.TripLog", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.Trip", "Trip")
                        .WithMany("TripLogs")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.User", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Vehicle", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.CapacityDetailType", "CapacityDetailType")
                        .WithMany()
                        .HasForeignKey("CapacityDetailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raphael.Shared.Entities.CapacityType", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("CapacityTypeId");

                    b.HasOne("Raphael.Shared.Entities.VehicleGroup", "VehicleGroup")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raphael.Shared.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CapacityDetailType");

                    b.Navigation("VehicleGroup");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.VehicleRoute", b =>
                {
                    b.HasOne("Raphael.Shared.Entities.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raphael.Shared.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.BillingItem", b =>
                {
                    b.Navigation("FundingSourceBillingItems");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.CapacityType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Customer", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.FundingSource", b =>
                {
                    b.Navigation("BillingItems");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.SpaceType", b =>
                {
                    b.Navigation("CapacityDetails");

                    b.Navigation("FundingSourceBillingItems");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Trip", b =>
                {
                    b.Navigation("TripLogs");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.Unit", b =>
                {
                    b.Navigation("BillingItems");
                });

            modelBuilder.Entity("Raphael.Shared.Entities.VehicleRoute", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("FundingSources");

                    b.Navigation("Schedules");

                    b.Navigation("Suspensions");
                });
#pragma warning restore 612, 618
        }
    }
}
